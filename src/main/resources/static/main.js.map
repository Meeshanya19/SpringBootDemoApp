{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/add-patient/add-patient.component.css","webpack:///./src/app/add-patient/add-patient.component.html","webpack:///./src/app/add-patient/add-patient.component.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/patient-data.service.ts","webpack:///./src/app/patient-data.ts","webpack:///./src/app/patient-data/patient-data.component.css","webpack:///./src/app/patient-data/patient-data.component.html","webpack:///./src/app/patient-data/patient-data.component.ts","webpack:///./src/app/patient-list/patient-list.component.css","webpack:///./src/app/patient-list/patient-list.component.html","webpack:///./src/app/patient-list/patient-list.component.ts","webpack:///./src/app/patient.service.ts","webpack:///./src/app/patient.ts","webpack:///./src/app/update-patient/update-patient.component.css","webpack:///./src/app/update-patient/update-patient.component.html","webpack:///./src/app/update-patient/update-patient.component.ts","webpack:///./src/app/update-patients-data/update-patients-data.component.css","webpack:///./src/app/update-patients-data/update-patients-data.component.html","webpack:///./src/app/update-patients-data/update-patients-data.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FkZC1wYXRpZW50L2FkZC1wYXRpZW50LmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<h3>Add Patient</h3>\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-4\\\"></div>\\n  <div class=\\\"col-sm-4\\\" >\\n    <div [hidden]=\\\"submitted\\\" style=\\\"width: 400px;\\\">\\n      <form [formGroup]=\\\"patientSaveForm\\\" #savepatient (ngSubmit)=\\\"savePatient(savepatient)\\\">\\n          <div class=\\\"form-group\\\">\\n              <label>Patient Name</label>\\n              <input  type=\\\"text\\\" class=\\\"form-control\\\"  formControlName=\\\"patientFirstName\\\" data-toggle=\\\"tooltip\\\"\\n                      data-placement=\\\"right\\\" title=\\\"Enter Patient Name\\\" >\\n              <div class=\\\"alert alert-danger\\\" *ngIf = \\\"(PatientName.touched) && (PatientName.invalid)\\\"\\n                   style=\\\"margin-top: 5px;\\\">\\n                <span *ngIf=\\\"PatientName.errors.required\\\">Patient Name is Required</span>\\n                <span *ngIf = \\\"PatientName.errors.minlength\\\">  MinLength Error\\n          </span>\\n              </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n              <label > Last Name</label>\\n              <input  type=\\\"text\\\" class=\\\"form-control\\\"  formControlName=\\\"patientLastName\\\" data-toggle=\\\"tooltip\\\"\\n                      data-placement=\\\"right\\\" title=\\\"Enter  Last Name\\\" >\\n              <div class=\\\"alert alert-danger\\\" *ngIf = \\\"(PatientLastName.touched) && (PatientLastName.invalid)\\\"\\n                   style=\\\"margin-top: 5px;\\\">\\n                <span *ngIf=\\\"PatientLastName.errors.required\\\">Patient Name is Required</span>\\n                <span *ngIf = \\\"PatientLastName.errors.minlength\\\">  MinLength Error\\n          </span>\\n              </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n              <label >Date of birth</label>\\n              <input  type=\\\"date\\\" class=\\\"form-control\\\"   formControlName=\\\"patientDateOfBirth\\\" data-toggle=\\\"tooltip\\\"\\n                      data-placement=\\\"right\\\" title=\\\"Enter patient birth\\\" >\\n            </div>\\n            <div class=\\\"form-group\\\">\\n              <label > Sex</label>\\n              <select  type=\\\"text\\\" class=\\\"form-control\\\"  formControlName=\\\"patientSex\\\" data-toggle=\\\"tooltip\\\"\\n                       data-placement=\\\"right\\\" title=\\\"Enter Sex\\\" >\\n                <option value=\\\"null\\\">--Select sex--</option>\\n                <option value=\\\"Female\\\">Female</option>\\n                <option value=\\\"Male\\\">Male</option>\\n              </select>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n              <label >Country</label>\\n              <input  type=\\\"text\\\" class=\\\"form-control\\\"  formControlName=\\\"patientCountry\\\" data-toggle=\\\"tooltip\\\"\\n                      data-placement=\\\"right\\\" title=\\\"Enter Country\\\" >\\n              <div class=\\\"alert alert-danger\\\" *ngIf = \\\"(PatientCountry.touched) && (PatientCountry.invalid)\\\"\\n                   style=\\\"margin-top: 5px;\\\">\\n                <span *ngIf=\\\"PatientCountry.errors.required\\\">Patient Country is Required</span>\\n                <span *ngIf = \\\"PatientCountry.errors.minlength\\\">  MinLength Error\\n          </span>\\n              </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n              <label >State</label>\\n              <input  type=\\\"text\\\" class=\\\"form-control\\\"  formControlName=\\\"patientState\\\" data-toggle=\\\"tooltip\\\"\\n                      data-placement=\\\"right\\\" title=\\\"Enter State\\\" >\\n              <div class=\\\"alert alert-danger\\\" *ngIf = \\\"(PatientState.touched) && (PatientState.invalid)\\\"\\n                   style=\\\"margin-top: 5px;\\\">\\n                <span *ngIf=\\\"PatientState.errors.required\\\">Patient State is Required</span>\\n                <span *ngIf = \\\"PatientState.errors.minlength\\\">  MinLength Error\\n          </span>\\n              </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n              <label >Address</label>\\n              <input  type=\\\"text\\\" class=\\\"form-control\\\"  formControlName=\\\"patientAddress\\\" data-toggle=\\\"tooltip\\\"\\n                      data-placement=\\\"right\\\" title=\\\"Enter Address\\\" >\\n              <div class=\\\"alert alert-danger\\\" *ngIf = \\\"(PatientAddress.touched) && (PatientAddress.invalid)\\\"\\n                   style=\\\"margin-top: 5px;\\\">\\n                <span *ngIf=\\\"PatientAddress.errors.required\\\">Patient Address is Required</span>\\n                <span *ngIf = \\\"PatientAddress.errors.minlength\\\">  MinLength Error\\n          </span>\\n              </div>\\n            </div>\\n\\n          <button type=\\\"submit\\\" class=\\\"btn btn-success\\\">Submit</button>\\n      </form>\\n  </div>\\n  </div>\\n  <div class=\\\"col-sm-4\\\"></div>\\n</div>\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-4\\\"></div>\\n  <div class=\\\"col-sm-4\\\">\\n      <div [hidden]=\\\"!submitted\\\">\\n         <h4>Patient Added SuccessFully!</h4>\\n         <button (click)=\\\"addPatientForm()\\\" class='btn btn-primary'>Add More Patient</button>\\n      </div>\\n  </div>\\n  <div class=\\\"col-sm-4\\\"></div>\\n</div>\\n\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { PatientService } from '../patient.service';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport { Patient } from '../patient';\n@Component({\n  selector: 'app-add-student',\n  templateUrl: './add-patient.component.html',\n  styleUrls: ['./add-patient.component.css']\n})\nexport class AddPatientComponent implements OnInit {\n\n  constructor(private patientService: PatientService) { }\n\n  get PatientName() {\n    return this.patientSaveForm.get('patientFirstName');\n  }\n  get PatientLastName() {\n    return this.patientSaveForm.get('patientLastName');\n  }\n  get PatientDateOfBirth() {\n    return this.patientSaveForm.get('patientDateOfBirth');\n  }\n  get PatientSex() {\n    return this.patientSaveForm.get('patientSex');\n  }\n  get PatientCountry() {\n    return this.patientSaveForm.get('patientCountry');\n  }\n  get PatientState() {\n    return this.patientSaveForm.get('patientState');\n  }\n  get PatientAddress() {\n    return this.patientSaveForm.get('patientAddress');\n  }\n\n  patient: Patient;\n  submitted = false;\n\n  patientSaveForm = new FormGroup({\n    patientFirstName: new FormControl('' , [Validators.required , Validators.minLength(3) ] ),\n    patientLastName: new FormControl('', [Validators.required, Validators.minLength(3)]),\n    patientDateOfBirth: new FormControl('' ),\n    patientSex: new FormControl('' ),\n    patientCountry: new FormControl('', [Validators.required, Validators.minLength(3)]),\n    patientState: new FormControl('', [Validators.required, Validators.minLength(3)]),\n    patientAddress: new FormControl('', [Validators.required, Validators.minLength(3)])\n  });\n\n  ngOnInit() {\n    this.submitted = false;\n  }\n\n  savePatient(savePatient) {\n    this.patient = new Patient();\n    this.patient.patientFirstName = this.PatientName.value ;\n    this.patient.patientLastName = this.PatientLastName.value;\n    this.patient.patientDateOfBirth = this.PatientDateOfBirth.value;\n    this.patient.patientSex = this.PatientSex.value;\n    this.patient.patientCountry = this.PatientCountry.value;\n    this.patient.patientState = this.PatientState.value;\n    this.patient.patientAddress = this.PatientAddress.value;\n    this.submitted = true;\n    this.save();\n  }\n\n\n\n  save() {\n    this.patientService.createPatient(this.patient)\n      .subscribe(data => console.log(data), error => console.log(error));\n    this.patient = new Patient();\n  }\n\n  addPatientForm() {\n    this.submitted = false;\n    this.patientSaveForm.reset();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { PatientListComponent } from './patient-list/patient-list.component';\nimport { AddPatientComponent } from './add-patient/add-patient.component';\nimport {PatientDataComponent} from './patient-data/patient-data.component';\nimport {UpdatePatientComponent} from './update-patient/update-patient.component';\nimport {UpdatePatientsDataComponent} from './update-patients-data/update-patients-data.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'view-patient', pathMatch: 'full' },\n  { path: 'view-patient', component: PatientListComponent },\n  { path: 'add-patient', component: AddPatientComponent },\n  { path: 'add-patient-data', component: PatientDataComponent },\n  { path: 'getPatientData/:patientId', component: PatientDataComponent },\n  { path: 'update-patient/:patient-id', component: UpdatePatientComponent},\n  { path: 'edit-patient-data/:patient-data-id', component: UpdatePatientsDataComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"    <div  class=\\\"container-fluid\\\">\\r\\n    <nav class=\\\"navbar navbar-expand-sm bg-dark navbar-dark\\\">\\r\\n        <ul class=\\\"navbar-nav\\\">\\r\\n          <li class=\\\"nav-item \\\">\\r\\n            <a routerLink=\\\"view-patient\\\" class=\\\"nav-link\\\" class=\\\"btn btn-primary active\\\" role=\\\"button\\\" >View Patients</a>\\r\\n          </li>&nbsp;\\r\\n          <li class=\\\"nav-item\\\">\\r\\n            <a  routerLink=\\\"add-patient\\\" class=\\\"nav-link\\\" class=\\\"btn btn-primary active\\\" role=\\\"button\\\" >Add Patient</a>\\r\\n          </li>\\r\\n                  </ul>\\r\\n      </nav>\\r\\n        <router-outlet></router-outlet>\\r\\n    </div>\\r\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'FormSubmit';\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport {DataTablesModule} from 'angular-datatables';\nimport { PatientListComponent } from './patient-list/patient-list.component';\nimport { AddPatientComponent } from './add-patient/add-patient.component';\nimport { PatientDataComponent } from './patient-data/patient-data.component';\nimport { UpdatePatientComponent } from './update-patient/update-patient.component';\nimport { UpdatePatientsDataComponent } from './update-patients-data/update-patients-data.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PatientListComponent,\n    AddPatientComponent,\n    PatientDataComponent,\n    UpdatePatientComponent,\n    UpdatePatientsDataComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    DataTablesModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {PatientData} from './patient-data';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PatientDataService {\n  private baseUrl = 'http://localhost:8080/api/';\n\n  constructor(private http: HttpClient) { }\n\n  getPatientData(patientDataId: number): Observable<any> {\n    return this.http.get(`${this.baseUrl}/getPatientData/${patientDataId}`);\n  }\n\n  createPatientData(patientData: object, id: number): Observable<object> {\n    return this.http.post(`${this.baseUrl}/create-patient-data/${id}`, patientData);\n  }\n\n  deletePatientData(patientDataId: number): Observable<any> {\n    return this.http.delete(`${this.baseUrl}/delete-patient-data/${patientDataId}`, { responseType: 'text' });\n  }\n\n  // tslint:disable-next-line:ban-types\n  getRecord(patientDataId: number): Observable<any> {\n    return this.http.get(`${this.baseUrl}/patient-data-by-id/${patientDataId}`);\n  }\n  // tslint:disable-next-line:ban-types\n  editPatientData(patientData: any): Observable<any> {\n    return this.http.post(`${this.baseUrl}/edit-patient-data/`, patientData);\n  }\n}\n","import {Patient} from './patient';\n\nexport class PatientData {\n  patientDataId: number;\n  createDate: Date;\n  patientDataText: string;\n  titleOfData: string;\n  patientId: number;\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhdGllbnQtZGF0YS9wYXRpZW50LWRhdGEuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<p>\\n  patient-data works!\\n</p>\\n\\n<div class=\\\"panel-body\\\">\\n  <table  class=\\\"table table-hover table-sm\\\"   >\\n    <thead class=\\\"thead-light\\\">\\n    <tr>\\n      <th>Patient name</th>\\n      <th>Patient last name</th>\\n      <th>Patient Date of birth</th>\\n      <th>Patient sex</th>\\n      <th>Patient country</th>\\n      <th>Patient state</th>\\n      <th>Patient address</th>\\n      <th>Action</th>\\n    </tr>\\n    </thead>\\n    <tbody>\\n    <tr>\\n      <td>{{patient.patientFirstName}}</td>\\n      <td>{{patient.patientLastName}}</td>\\n      <td>{{patient.patientDateOfBirth}}</td>\\n      <td>{{patient.patientSex}}</td>\\n      <td>{{patient.patientCountry}}</td>\\n      <td>{{patient.patientState}}</td>\\n      <td>{{patient.patientAddress}}</td>\\n      <td><button (click)=\\\"this.addFormToPage = false;\\\" class='btn btn-primary'>\\n        <i class=\\\"fa fa-futboll-0\\\">Add Record</i></button>\\n\\n      </td>\\n    </tr>\\n    </tbody><br>\\n  </table>\\n</div>\\n\\n\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-4\\\"></div>\\n  <div class=\\\"col-sm-4\\\" >\\n    <div [hidden]=\\\"addFormToPage\\\"  style=\\\"width: 400px;\\\">\\n      <form [formGroup]=\\\"patientDataSaveForm\\\"  (ngSubmit)=\\\"addPatientData()\\\">\\n        <div class=\\\"form-group\\\">\\n          <label> Title</label>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"patientDataTitle\\\" data-toggle=\\\"tooltip\\\"\\n                 data-placement=\\\"right\\\" title=\\\"Enter some text\\\">\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <label> Record</label>\\n          <textarea type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"patientDataText\\\" data-toggle=\\\"tooltip\\\"\\n                    data-placement=\\\"right\\\" title=\\\"Enter some text\\\"></textarea>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <label>Date of add</label>\\n          <input type=\\\"date\\\" class=\\\"form-control\\\" formControlName=\\\"createDate\\\" placeholder=\\\"dd/mm/yyyy\\\" data-toggle=\\\"tooltip\\\"\\n                 data-placement=\\\"right\\\" title=\\\"Select date\\\">\\n        </div>\\n        <button type=\\\"submit\\\" class=\\\"btn btn-success\\\">Add</button>\\n      </form>\\n        <button (click)=\\\"this.reset()\\\" class=\\\"btn btn-success\\\">Cancel</button>\\n\\n    </div>\\n  </div>\\n  <div class=\\\"col-sm-4\\\"></div>\\n</div>\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-4\\\"></div>\\n  <div class=\\\"col-sm-4\\\">\\n    <div [hidden]=\\\"!submitted\\\">\\n      <h4>Patient Data Added SuccessFully!</h4>\\n      <button (click)=\\\"reset()\\\" class='btn btn-primary'>Ok</button>\\n    </div>\\n  </div>\\n  <div class=\\\"col-sm-4\\\"></div>\\n</div>\\n\\n<div>\\n<table  class=\\\"table table-hover table-sm\\\" datatable [dtOptions]=\\\"dtOptions\\\"\\n        [dtTrigger]=\\\"dtTrigger\\\"  >\\n  <thead class=\\\"thead-light\\\">\\n  <tr>\\n    <th>Date</th>\\n    <th>Title</th>\\n    <th>Text</th>\\n\\n    <th>Action</th>\\n  </tr>\\n  </thead>\\n  <tbody>\\n  <tr *ngFor=\\\"let patientData of patientDataList\\\">\\n    <td>{{patientData.createDate}}</td>\\n    <td>{{patientData.titleOfData}}</td>\\n    <td>{{patientData.patientDataText}}</td>\\n    <td><button (click)=\\\"deletePatientData(patientData.patientDataId)\\\" class='btn btn-info'>Delete data</button>\\n      <button (click)=\\\"editPatientData(patientData.patientDataId)\\\" class='btn btn-info'\\n              data-toggle=\\\"modal\\\" data-target=\\\"#myModal\\\">Edit</button>\\n    </td>\\n  </tr>\\n  </tbody><br>\\n</table>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { PatientDataService} from '../patient-data.service';\nimport {PatientService} from '../patient.service';\nimport {PatientData} from '../patient-data';\nimport {FormControl, FormGroup} from '@angular/forms';\nimport {Observable, Subject} from 'rxjs';\nimport {Patient} from '../patient';\nimport {Router, ActivatedRoute} from '@angular/router';\n\n\n@Component({\n  selector: 'app-patient-data',\n  templateUrl: './patient-data.component.html',\n  styleUrls: ['./patient-data.component.css']\n})\nexport class PatientDataComponent implements OnInit {\n\n  constructor(private patientDataService: PatientDataService,\n              private  patientService: PatientService,\n              private router: Router,\n              private route: ActivatedRoute) { }\n\n  get createDate() {\n    return this.patientDataSaveForm.get('createDate');\n  }\n  get patientDataText() {\n    return this.patientDataSaveForm.get('patientDataText');\n  }\n  get titleOfData() {\n    return this.patientDataSaveForm.get('patientDataTitle');\n  }\n  get patientId() {\n    return this.patientDataSaveForm.get('patientId');\n  }\n\n  patientData: PatientData;\n  patientDataList: Array<PatientData>;\n  patient: Patient;\n  submitted = false;\n  addFormToPage = true;\n  dtOptions: DataTables.Settings = {};\n  dtTrigger: Subject<any> = new Subject();\n\n  patientDataSaveForm = new FormGroup({\n    createDate: new FormControl(''),\n    patientDataTitle: new FormControl(''),\n    patientDataText: new FormControl('' )\n  });\n\n  ngOnInit() {\n    this.patient = new Patient();\n    this.patient.patientId = this.route.snapshot.params.patientId;\n    this.tableOptions();\n    this.findPatient();\n    this.findAllPatientData();\n    this.submitted = false;\n  }\n\n  addPatientData() {\n    this.patientData = new PatientData();\n    this.patientData.createDate = this.createDate.value ;\n    this.patientData.titleOfData = this.titleOfData.value;\n    this.patientData.patientDataText = this.patientDataText.value;\n    this.patientData.patientId = this.patient.patientId;\n    this.submitted = true;\n    this.savePatientData();\n  }\n\ntableOptions() {\n    this.dtOptions = {\n    pageLength: 6,\n    stateSave: true,\n    lengthMenu: [[6, 16, 20, -1], [6, 16, 20, 'All']],\n    processing: true\n    };\n  }\n\n  savePatientData() {\n    this.patientDataService.createPatientData(this.patientData, this.patient.patientId)\n      .subscribe(data => console.log(data), error => console.log(error));\n    this.patientData = new PatientData();\n\n  }\n\n  reset() {\n    this.submitted = false;\n    this.patientDataSaveForm.reset();\n    this.findAllPatientData();\n    this.addFormToPage = true;\n  }\n\n  findPatient() {\n    this.patientService.getPatient(this.patient.patientId).\n    subscribe(data => {console.log(data);\n                       this.patient = data; },\n      // tslint:disable-next-line:no-shadowed-variable\n      error => console.log(error));\n  }\n\n  findAllPatientData() {\n    this.patientDataService.getPatientData(this.patient.patientId).\n      subscribe(data => {console.log(data);\n                         this.patientDataList = data; },\n      // tslint:disable-next-line:no-shadowed-variable\n      error => console.log(error));\n  }\n\n  goToDataList(patientId: number) {\n    this.router.navigate(['getPatientData', patientId]);\n  }\n\n  deletePatientData(patientDataId: number) {\n    this.patientDataService.deletePatientData(patientDataId);\n    this.reset();\n  }\n\n  editPatientData(patientDataId: number ) {\n    this.router.navigate(['edit-patient-data', patientDataId]);\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhdGllbnQtbGlzdC9wYXRpZW50LWxpc3QuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<div class=\\\"panel panel-default\\\">\\n  <div class=\\\"panel-heading\\\">\\n    <h1 style=\\\"text-align: center\\\">Patients</h1><br>\\n    <div class=\\\"row\\\" [hidden]=\\\"!deleteMessage\\\">\\n\\n      <div class=\\\"col-sm-4\\\"></div>\\n      <div class=\\\"col-sm-4\\\">\\n        <div class=\\\"alert alert-info alert-dismissible\\\">\\n          <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\">×</button>\\n          <strong>Patient Data Deleted</strong>\\n        </div>\\n      </div>\\n      <div class=\\\"col-sm-4\\\"></div>\\n    </div>\\n  </div>\\n\\n\\n  <div class=\\\"panel-body\\\">\\n    <table  class=\\\"table table-hover table-sm\\\" datatable [dtOptions]=\\\"dtOptions\\\"\\n            [dtTrigger]=\\\"dtTrigger\\\"  >\\n      <thead class=\\\"thead-light\\\">\\n      <tr>\\n        <th>Patient name</th>\\n        <th>Patient last name</th>\\n        <th>Patient Date of birth</th>\\n        <th>Patient sex</th>\\n        <th>Patient country</th>\\n        <th>Patient state</th>\\n        <th>Patient address</th>\\n        <th>Action</th>\\n      </tr>\\n      </thead>\\n      <tbody>\\n      <tr *ngFor=\\\"let patient of patients \\\">\\n        <td>{{patient.patientFirstName}}</td>\\n        <td>{{patient.patientLastName}}</td>\\n        <td >{{patient.patientDateOfBirth | date: formatsDate}}</td>\\n        <td>{{patient.patientSex}}</td>\\n        <td>{{patient.patientCountry}}</td>\\n        <td>{{patient.patientState}}</td>\\n        <td>{{patient.patientAddress}}</td>\\n        <td><button (click)=\\\"deletePatient(patient.patientId)\\\" class='btn btn-primary'><i class=\\\"fa fa-futboll-0\\\">Delete</i></button>\\n          <button (click)=\\\"updatePatient(patient.patientId)\\\" class='btn btn-info'>Update</button>\\n          <button (click)=\\\"patientDetails(patient.patientId)\\\" class='btn btn-info'>Details</button>\\n        </td>\\n      </tr>\\n      </tbody><br>\\n    </table>\\n  </div>\\n</div>\\n\\n<div class=\\\"modal\\\" id=\\\"myModal\\\">\\n  <div class=\\\"modal-dialog\\\">\\n    <div class=\\\"modal-content\\\">\\n      <form [formGroup]=\\\"patientUpdateForm\\\" #updCstm (ngSubmit)=\\\"updatePatient(updatePatient)\\\">\\n        <!-- Modal Header -->\\n        <div class=\\\"modal-header\\\" *ngFor=\\\"let patient of somePatient\\\">\\n          <h4 class=\\\"modal-title\\\" style=\\\"text-align: center\\\">Update Patient</h4>\\n\\n        </div>\\n\\n        <!-- Modal body -->\\n        <div class=\\\"modal-body\\\" >\\n        <div [hidden]=\\\"isUpdated\\\">\\n\\n          <input type=\\\"hidden\\\" class=\\\"form-control\\\"  formControlName=\\\"patientId\\\" [(ngModel)]=\\\"patient.patientId\\\">\\n          <div class=\\\"form-group\\\">\\n            <label>Patient Name</label>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\"  formControlName=\\\"patientFirstName\\\" [(ngModel)]=\\\"patient.patientFirstName\\\"  >\\n          </div>\\n          <div class=\\\"form-group\\\">\\n            <label >Patient LastName</label>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\"  formControlName=\\\"patientLastName\\\" [(ngModel)]=\\\"patient.patientLastName\\\"  >\\n          </div>\\n          <div class=\\\"form-group\\\">\\n            <label >Date of birth</label>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\"  formControlName=\\\"patientDateOfBirth\\\" [(ngModel)]=\\\"patient.patientDateOfBirth\\\"  >\\n          </div>\\n          <div class=\\\"form-group\\\">\\n            <label >Sex</label>\\n            <select class=\\\"form-control\\\" formControlName=\\\"patientSex\\\" required>\\n              <option value=\\\"Male\\\" [selected]=\\\"'Male' == patient.patientSex\\\">Male</option>\\n              <option value=\\\"Female\\\" [selected]=\\\"'Female' == patient.patientSex\\\">Female</option>\\n            </select>\\n          </div>\\n          <div class=\\\"form-group\\\">\\n            <label >Country</label>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\"  formControlName=\\\"patientCountry\\\" [(ngModel)]=\\\"patient.patientCountry\\\"  >\\n          </div>\\n          <div class=\\\"form-group\\\">\\n            <label >State</label>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\"  formControlName=\\\"patientState\\\" [(ngModel)]=\\\"patient.patientState\\\"  >\\n          </div>\\n          <div class=\\\"form-group\\\">\\n            <label >Address</label>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\"  formControlName=\\\"patientAddress\\\" [(ngModel)]=\\\"patient.patientAddress\\\"  >\\n          </div>\\n        </div>\\n          <div [hidden]=\\\"!isUpdated\\\">\\n            <h4>Student Detail Updated!</h4>\\n          </div>\\n\\n        </div>\\n\\n        <!-- Modal footer -->\\n        <div class=\\\"modal-footer\\\" >\\n          <button type=\\\"submit\\\" class=\\\"btn btn-success\\\" [hidden]=\\\"isUpdated\\\">Update</button>\\n          <button type=\\\"button\\\" class=\\\"btn btn-danger\\\" data-dismiss=\\\"modal\\\" (click)=\\\"changeisUpdate()\\\">Close</button>\\n        </div>\\n\\n      </form>\\n    </div>\\n  </div>\\n</div>\\n\"","import {Component, OnInit, Optional} from '@angular/core';\nimport { PatientService } from '../patient.service';\nimport { Patient } from '../patient';\nimport { Observable, Subject } from 'rxjs';\nimport {PatientDataService} from '../patient-data.service';\nimport {Router, Routes} from '@angular/router';\nimport {PatientDataComponent} from '../patient-data/patient-data.component';\n\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\n\nconst appRoutes: Routes = [\n  { path: '/add-record/:id', component: PatientDataComponent },\n  ];\n\n@Component({\n  selector: 'app-patient-list',\n  templateUrl: './patient-list.component.html',\n  styleUrls: ['./patient-list.component.css']\n})\nexport class PatientListComponent implements OnInit {\n\n constructor(private patientservice: PatientService,\n             private patientRecordService: PatientDataService,\n             private router: Router) { }\n\n  get PatientName() {\n    return this.patientUpdateForm.get('patientFirstName');\n  }\n\n  get PatientLastName() {\n    return this.patientUpdateForm.get('patientLastName');\n  }\n\n  get PatientDateOfBirth() {\n    return this.patientUpdateForm.get('patientDateOfBirth');\n  }\n\n  get PatientSex() {\n    return this.patientUpdateForm.get('patientSex');\n  }\n\n  get PatientCountry() {\n    return this.patientUpdateForm.get('patientCountry');\n  }\n\n  get PatientState() {\n    return this.patientUpdateForm.get('patientState');\n  }\n\n  get PatientAddress() {\n    return this.patientUpdateForm.get('patientAddress');\n  }\n\n  get PatientId() {\n    return this.patientUpdateForm.get('patientId');\n  }\n\n  dtOptions: DataTables.Settings = {};\n  dtTrigger: Subject<any> = new Subject();\n  patients: Observable<Patient[]>;\n  patient: Patient = new Patient();\n  deleteMessage = false;\n  somePatient: any = Array<Patient>();\n  isUpdated = false;\n  formatsDate = 'dd/MM/yyyy';\n\n  patientUpdateForm = new FormGroup({\n    patientId: new FormControl(),\n    patientFirstName: new FormControl(),\n    patientLastName: new FormControl(),\n    patientDateOfBirth: new FormControl(),\n    patientSex: new FormControl(),\n    patientCountry: new FormControl(),\n    patientState: new FormControl(),\n    patientAddress: new FormControl()\n  });\n\n  ngOnInit() {\n    this.isUpdated = false;\n    this.dtOptions = {\n      pageLength: 6,\n      stateSave: true,\n      lengthMenu: [[6, 16, 20, -1], [6, 16, 20, 'All']],\n      processing: true\n    };\n\n    this.patientservice.getPatientList().subscribe(data => {\n      this.patients = data;\n      this.dtTrigger.next(); });\n  }\n\n  deletePatient(id: number) {\n    this.patientservice.deletePatient(id)\n      .subscribe(\n        data => {\n          console.log(data);\n          this.deleteMessage = true;\n          // tslint:disable-next-line:no-shadowed-variable\n          this.patientservice.getPatientList().subscribe(data => {\n            this.patients = data;\n          });\n        },\n        error => console.log(error));\n  }\n\n  getSomePatient(id: number) {\n    this.patientservice.getPatient(id)\n      .subscribe(data => {\n          this.somePatient = data;\n        },\n        error => console.log(error));\n  }\n\n    changeisUpdate() {\n    this.isUpdated = false;\n  }\n\n  adRecord(id: number) {\n    this.router.navigate(['/add-record']);\n  }\n\n  patientDetails(patientId: number) {\n    this.router.navigate(['getPatientData', patientId]);\n  }\n\n  updatePatient(patientId: number ) {\n    this.router.navigate(['update-patient', patientId]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class PatientService {\n\n  private baseUrl = 'http://localhost:8080/api/';\n\n  constructor(private http: HttpClient) { }\n\n  getPatientList(): Observable<any> {\n    return this.http.get(`${this.baseUrl}` + 'patient-list');\n  }\n\n  createPatient(patient: object): Observable<object> {\n    return this.http.post(`${this.baseUrl}` + 'save-patient', patient);\n  }\n\n  deletePatient(patientId: number): Observable<any> {\n    return this.http.delete(`${this.baseUrl}/delete-patient/${patientId}`, { responseType: 'text' });\n  }\n  getPatient(patientId: number): Observable<any> {\n    return this.http.get(`${this.baseUrl}/patient/${patientId}`);\n  }\n  updatePatient( value: any): Observable<any> {\n    return this.http.post(`${this.baseUrl}/update-patient/`, value);\n  }\n  }\n","import {PatientData} from './patient-data';\r\n\r\nexport class Patient {\r\n  patientId: number;\r\n  patientFirstName: string;\r\n  patientLastName: string;\r\n  patientDateOfBirth: Date;\r\n  patientSex: string;\r\n  patientCountry: string;\r\n  patientState: string;\r\n  patientAddress: string;\r\n}\r\n\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3VwZGF0ZS1wYXRpZW50L3VwZGF0ZS1wYXRpZW50LmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<h3>Update Patient</h3>\\n<div [hidden]=\\\"submitted\\\" style=\\\"width: 400px;\\\">\\n  <form (ngSubmit)=\\\"onSubmit()\\\">\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"name\\\">First Name</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"firstName\\\" required [(ngModel)]=\\\"patient.patientFirstName\\\" name=\\\"firstName\\\">\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"name\\\">Last Name</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"lastName\\\" required [(ngModel)]=\\\"patient.patientLastName\\\" name=\\\"lastName\\\">\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"name\\\">Date of Birth</label>\\n      <input type=\\\"date\\\" class=\\\"form-control\\\" id=\\\"dateOfBirth\\\" required [(ngModel)]=\\\"patient.patientDateOfBirth\\\" name=\\\"dateOfBirth\\\">\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"name\\\">Sex</label>\\n      <select input type=\\\"select\\\" class=\\\"form-control\\\" id=\\\"sex\\\" required [(ngModel)]=\\\"patient.patientSex\\\" name=\\\"sex\\\">\\n        <option value=\\\"null\\\">--Select sex--</option>\\n        <option value=\\\"Female\\\">Female</option>\\n        <option value=\\\"Male\\\">Male</option>\\n      </select>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"name\\\">Country</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"country\\\" required [(ngModel)]=\\\"patient.patientCountry\\\" name=\\\"country\\\">\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"name\\\">State</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"state\\\" required [(ngModel)]=\\\"patient.patientState\\\" name=\\\"state\\\">\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"name\\\">Address</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"address\\\" required [(ngModel)]=\\\"patient.patientAddress\\\" name=\\\"address\\\">\\n    </div>\\n    <button type=\\\"submit\\\" class=\\\"btn btn-success\\\">Submit</button>\\n  </form>\\n</div>\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-4\\\"></div>\\n  <div class=\\\"col-sm-4\\\">\\n    <div [hidden]=\\\"!submitted\\\">\\n      <h4>Edit Patient SuccessFully!</h4>\\n      <button (click)=\\\"gotoList()\\\" class='btn btn-primary'>Add More Patient</button>\\n    </div>\\n  </div>\\n  <div class=\\\"col-sm-4\\\"></div>\\n</div>\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {Patient} from '../patient';\nimport {PatientService} from '../patient.service';\n\n@Component({\n  selector: 'app-update-patient',\n  templateUrl: './update-patient.component.html',\n  styleUrls: ['./update-patient.component.css']\n})\nexport class UpdatePatientComponent implements OnInit {\n\n  patientId: number;\n  patient: Patient;\n  submitted = false;\n\n\n  constructor(private route: ActivatedRoute, private router: Router,\n              private patientService: PatientService) { }\n\n  ngOnInit() {\n    this.patient = new Patient();\n    this.patientId = this.route.snapshot.params['patient-id'];\n\n    this.patientService.getPatient(this.patientId)\n      .subscribe(data => {\n        console.log(data)\n        this.patient = data;\n      }, error => console.log(error));\n  }\n\n  updatePatient() {\n    this.patientService.updatePatient( this.patient)\n      .subscribe(data => console.log(data), error => console.log(error));\n    this.patient = new Patient();\n    this.gotoList();\n  }\n\n  onSubmit() {\n    this.updatePatient();\n  }\n\n  gotoList() {\n    this.router.navigate(['/view-patient']);\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3VwZGF0ZS1wYXRpZW50cy1kYXRhL3VwZGF0ZS1wYXRpZW50cy1kYXRhLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<h3>Update Patient data</h3>\\n<div [hidden]=\\\"submitted\\\" style=\\\"width: 400px;\\\">\\n  <form (ngSubmit)=\\\"onSubmit()\\\">\\n        <div class=\\\"form-group\\\">\\n      <label for=\\\"name\\\">Title</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"titleOfData\\\" required [(ngModel)]=\\\"patientData.titleOfData\\\" name=\\\"firstName\\\">\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"name\\\">Text</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"patientDataText\\\" required [(ngModel)]=\\\"patientData.patientDataText\\\" name=\\\"lastName\\\">\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"name\\\">Date </label>\\n      <input type=\\\"date\\\" class=\\\"form-control\\\" id=\\\"createDate\\\" required [(ngModel)]=\\\"patientData.createDate\\\" name=\\\"dateOfBirth\\\">\\n    </div>\\n    <button type=\\\"submit\\\" class=\\\"btn btn-success\\\">Edit</button>\\n  </form>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {Patient} from '../patient';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {PatientDataService} from '../patient-data.service';\nimport {PatientData} from '../patient-data';\n\n@Component({\n  selector: 'app-update-patients-data',\n  templateUrl: './update-patients-data.component.html',\n  styleUrls: ['./update-patients-data.component.css']\n})\nexport class UpdatePatientsDataComponent implements OnInit {\n\n  patientData: PatientData;\n  patientDataId: number;\n  patientId: number;\n  submitted = false;\n  deleteMessage = false;\n\n  constructor(private route: ActivatedRoute, private router: Router,\n              private patientDataService: PatientDataService) { }\n\n  ngOnInit() {\n    this.patientDataId = this.route.snapshot.params['patient-data-id'];\n    this.patientData = new PatientData();\n    this.patientDataService.getRecord(this.patientDataId)\n      .subscribe(data => {\n        console.log(data)\n        this.patientData = data;\n      }, error => console.log(error));\n    this.patientId = this.patientData.patientId;\n  }\n\n  editPatientData() {\n    this.patientDataService.editPatientData( this.patientData)\n      .subscribe(data => console.log(data), error => console.log(error));\n    this.patientData = new PatientData();\n\n  }\n\n  onSubmit() {\n    this.editPatientData();\n    this.gotoList(this.patientId);\n  }\n\n  gotoList(patientId: number) {\n    this.router.navigate(['view-patient']);\n  }\n\n  deletePatientData(patientDataId: number) {\n    this.patientDataService.deletePatientData(patientDataId)\n      .subscribe(\n        data => {\n          console.log(data);\n          this.deleteMessage = true;\n        },\n        error => console.log(error));\n    this.gotoList(this.patientId);\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}